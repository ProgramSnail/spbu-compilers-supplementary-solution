-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun evalRead (c, x) {
  var newWorld;
  newWorld := readWorld(c.snd);
  [(c.fst <- [x, newWorld.fst]), newWorld.snd]
}

fun eval (c, stmt) {
  case stmt of
      Assn (x, e) -> [c.fst <- [x, evalExpr (c.fst, e)], c.snd]
    | Seq (s1, s2) -> eval (eval (c, s1), s2)
    | Skip -> c
    | Read (x) -> evalRead(c, x)
    | Write (e) -> [c.fst, writeWorld (evalExpr (c.fst, e), c.snd)]
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}

-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ  (x) -> sprintf ("READ %s", x)
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

fun evalRead (c) {
  var newWorld;
  newWorld := readWorld(c.snd.snd);
  [newWorld.fst : c.fst, [c.snd.fst, newWorld.snd]]
}

fun evalReadX (c, x) {
  var newWorld;
  newWorld := readWorld(c.snd.snd);
  [c.fst, [c.snd.fst <- [x, newWorld.fst], newWorld.snd]]
}

fun evalIns (c, i) {
  -- TODO: assign val to var
    -- READ  (x)     -> [readWorld (c.snd.snd).fst : c.fst, [c.snd.fst, readWorld (c.snd.snd).snd]]
  case i of 
    READ      -> evalRead (c)
  | READ  (x) -> evalReadX (c, x)
  | WRITE     -> [c.fst.tl, [c.snd.fst, writeWorld (c.fst.hd, c.snd.snd)]]
  | BINOP (s) -> [applyBinop (s, c.fst.tl.hd, c.fst.hd) : c.fst.tl.tl, c.snd]
  | LD    (x) -> [c.snd.fst(x) : c.fst, c.snd]
  | ST    (x) -> [c.fst.tl, [c.snd.fst <- [x, c.fst.hd], c.snd.snd]]
  | CONST (n) -> [n : c.fst, c.snd]
  esac
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of
    i : insns_tail -> eval(evalIns(c, i), insns_tail)
    | {} -> c
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
      Var (x) -> LD (x)
    | Const (i) -> CONST (i)
    | Binop (op, e1, e2) -> compileExpr(e1) : compileExpr (e2) : BINOP (op)
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
      Assn (x, e) -> compileExpr (e) : ST (x)
    | Seq (s1, s2) -> compileSM (s1) : compileSM (s2)
    | Skip -> {}
    | Read (x) ->  READ (x)  -- : ST (x)
    | Write (e) -> compileExpr (e) : WRITE
  esac
}

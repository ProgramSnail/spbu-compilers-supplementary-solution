-- Stack machine.
-- SM CONFIG: [STACK, [STATE, WORLD]]

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ  (x) -> sprintf ("READ %s", x)
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

fun stack(x) { x[0] }

fun state(x) { x[1] }

fun world(x) { x[2] }

fun evalRead (c) {
  var newWorld;
  newWorld := readWorld(c.world);
  [newWorld.fst : c.stack, c.state, newWorld.snd]
}

fun evalIns (c, i) {
  case i of 
    READ      -> evalRead (c)
  | WRITE     -> [c.stack.tl, c.state, writeWorld (c.stack.hd, c.world)]
  | BINOP (s) -> 
    case c.stack of
      x : y : tl -> [applyBinop (s, y, x) : tl, c.state, c.world]
    esac
  | LD    (x) -> [state(c) (x) : c.stack, c.state, c.world]
  | ST    (x) -> [c.stack.tl, (c.state <- [x, c.stack.hd]), c.world]
  | CONST (n) -> [n : c.stack, c.state, c.world]
  esac
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of
    i : insns_tail -> eval(evalIns(c, i), insns_tail)
    | {} -> c
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
      Var (x) -> { LD (x) }
    | Const (i) -> { CONST (i) }
    | Binop (op, e1, e2) -> compileExpr(e1) +++ compileExpr (e2) +++ { BINOP (op) }
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
      Assn (x, e) -> compileExpr (e) +++ { ST (x) }
    | Seq (s1, s2) -> compileSM (s1) +++ compileSM (s2)
    | Skip -> {}
    | Read (x) ->  READ : { ST (x) }
    | Write (e) -> compileExpr (e) +++ { WRITE }
  esac
}
